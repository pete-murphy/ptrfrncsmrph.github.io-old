const mdx_ = require("@mdx-js/mdx")
const babel = require("@babel/core")
const fs = require("fs")
const path = require("path")
const ReactDOMServer = require("react-dom/server")
const React = require("react")
const mdxReact = require("@mdx-js/react")

const MultiCodeBlock = function ({ children }) {
  return children
}

function requireFromStringSync(src, filename) {
  const Module = module.constructor
  const m = new Module()
  m._compile(src, filename)

  // @TODO - Pete Murphy 2020-10-31 - Stealing this hack from Brandon Kase
  // I don't understand what's going on here
  const mdx = React.createElement
  const MDXLayout = function (props) {
    return React.createElement(
      "div",
      Object.assign({}, props, {
        style: { maxWidth: "38rem", padding: "1.5rem", margin: "auto" },
      })
    )
  }
  const _extends = Object.assign
  const layoutProps = {}
  // redefine m.exports.default to close over these functions
  m.exports.default = eval(
    "(function() { return " + m.exports.default.toString() + "})()"
  )
  return m.exports
}

function requireMDXSync(mdxSrc, filename) {
  let ast = null
  const jsx = mdx_.sync(mdxSrc, {
    remarkPlugins: [
      function () {
        return function (tree) {
          ast = tree
        }
      },
    ],
  })
  const babelOptions = babel.loadOptions({
    babelrc: false,
    presets: ["@babel/preset-react"],
    plugins: [
      "@babel/plugin-transform-modules-commonjs",
      [
        "module-resolver",
        {
          alias: {
            "@purescript": path.join(__dirname, "output"),
          },
        },
      ],
    ],
  })
  const transformed = babel.transformSync(jsx, babelOptions)
  return [requireFromStringSync(transformed.code, filename), ast]
}

function requireMDXFileSync(path) {
  const mdxSrc = fs.readFileSync(path, { encoding: "utf-8" })
  return requireMDXSync(mdxSrc, path)
}

function scanDir(dirPath, extension) {
  const mdxFiles = []
  function scan(dirPath) {
    const filenames = fs.readdirSync(dirPath)
    filenames.sort()
    filenames.map(function (filename) {
      const filePath = path.join(dirPath, filename)
      const st = fs.statSync(filePath)
      if (st.isFile() && filePath.endsWith(extension)) {
        mdxFiles.push(filePath)
      }
      if (st.isDirectory()) {
        scan(filePath)
      }
    })
  }
  scan(dirPath)
  return mdxFiles
}

function readPostMetadata(postPath) {
  const [mod, ast] = requireMDXFileSync(postPath)
  const content = ReactDOMServer.renderToString(
    React.createElement(
      mdxReact.MDXProvider,
      [],
      mod.default({
        components: {
          MultiCodeBlock,
        },
      })
    )
  )
  const { meta } = mod
  const title =
    meta && meta.title
      ? meta.title
      : ast.children.filter(function (x) {
          return x.type == "heading" && x.depth == 1
        })[0].children[0].value

  // pull description
  const description =
    meta && meta.description
      ? meta.description
      : ast.children.filter(function (x) {
          return x.type == "paragraph"
        })[0].children[0].value

  return {
    filePath: postPath,
    urlPath: postPath
      .replace(/\\/, "/")
      .replace(/^pages/, "")
      .replace(/\.mdx?$/, ""),
    title,
    date: (meta && new Date(meta.date)) || new Date(),
    content,
    description,
  }
}

function main() {
  const postPaths = scanDir("pages/posts", ".mdx")
  console.debug({ postPaths })
  const posts = postPaths.map(readPostMetadata)
  posts.sort(function (a, b) {
    const [aDate, bDate] = [a.date, b.date].map((d) => Date.parse(d))
    return bDate - aDate
  })
  const posts_ = posts.map(({ content, ...p }) => p)
  const postsJSON = JSON.stringify({ posts_ }, null, 2)
  fs.mkdirSync("src/gen", { recursive: true })
  const exportPath = "src/Gen/Posts.js"
  fs.writeFileSync(
    exportPath,
    "// automatically generated by gen-posts.js\n" +
      `module.exports = ${postsJSON};\n`
  )
}

main()
